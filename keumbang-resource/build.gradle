plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.23.3'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'com.keumbang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// mariaDB
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// security
	implementation "org.springframework.security:spring-security-web"
	implementation "org.springframework.security:spring-security-config"

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// grpc
	implementation 'io.grpc:grpc-netty-shaded:1.66.0'
	implementation 'io.grpc:grpc-protobuf:1.66.0'
	implementation 'io.grpc:grpc-stub:1.66.0'
	implementation 'com.google.protobuf:protobuf-java:4.27.4'
	implementation 'com.google.protobuf:protobuf-java-util:4.27.4'
	implementation 'net.devh:grpc-spring-boot-starter:2.15.0.RELEASE'
	compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

	// test lombok
	testCompileOnly 'org.projectlombok:lombok:1.18.28'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:4.27.4"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.66.0"
		}
	}
	generateProtoTasks {
		all().each { task ->
			task.plugins {
				grpc {}
			}
		}
	}
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/java/com/keumbang/resource/grpc/proto'
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named("compileJava") {
	dependsOn 'spotlessJava'
}

ext.googleJavaFormatVersion = "1.18.1"

spotless {
	java {
		target("src/main/java/**/*.java", "src/test/java/**/*.java")
		googleJavaFormat("$googleJavaFormatVersion")
		// 아래 순서로 import문 정렬
		importOrder('java', 'javax', 'jakarta', 'org', 'com')
		// 사용하지 않는 import 제거
		removeUnusedImports()
		// 각 라인 끝에 있는 공백을 제거
		trimTrailingWhitespace()
		// 파일 끝에 새로운 라인 추가
		endWithNewline()
	}
}

// Git hooks 업데이트 작업
tasks.register('updateGitHooks', Copy) {
	from '../script/pre-commit'
	into '../.git/hooks'
}

// makeGitHooksExecutable 작업을 OS에 따라 실행 여부 결정
tasks.register('makeGitHooksExecutable', Exec) {
	onlyIf { !System.properties['os.name'].toLowerCase().contains('windows') }
	commandLine 'chmod', '+x', '../.git/hooks/pre-commit'
	dependsOn 'updateGitHooks'
}

// compileJava 작업이 실행되기 전에 makeGitHooksExecutable 작업을 실행
tasks.named('compileJava') {
	dependsOn 'makeGitHooksExecutable'
}
